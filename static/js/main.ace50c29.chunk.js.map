{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newValue","current","value","console","log","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ace50c29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\nimport {loadTweets} from '../lookup'\n\nexport function TweetComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newValue = textAreaRef.current.value\n        console.log(newValue)\n        let tempNewTweets = [...newTweets]\n\n        // change it to a server side call\n        tempNewTweets.unshift({\n            content: newValue,\n            likes: 0,\n            id: 12313\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n\n\n    return <div className={props.className}>\n            <div className='col-12 mb=3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n            </div>\n            <TweetList newTweets={newTweets}/>\n        </div>\n}\n\nexport function TweetList(props){\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      const myCallback = (response, status) => {\n        if (status === 200){\n            setTweetsInit(response)\n        } else {\n            alert(\"error\")\n        }\n      }\n      loadTweets(myCallback)\n    }, [])\n    return tweets.map((item, index) => {\n      return <Tweet tweet = {item} key = {`${index}-{item.id}`} className='my-5 py-5 border bg-white text-dark'/>\n    })\n  }\n\n  \nfunction ActionBtn(props){\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like'){\n            if (userLike === true){\n                setLikes(likes-1)\n                setUserLike(false)\n            }else{\n                setLikes(likes+1)\n                setUserLike(true)\n            }\n        }\n    }\n    const display = action.type ==='like' ? `${likes} ${actionDisplay}` : action.display\n    return <button className = {className} onClick={handleClick}> {display} </button> \n  }\n  \n\nfunction Tweet(props){\n\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    const action = {type:\"like\"}\n    return <div className={className}>\n      <p>{tweet.id}-{tweet.content}</p>\n      <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{type:\"like\", display:\"Likes\"}}/>\n        <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"Unlike\"}}/>\n        <ActionBtn tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}}/>\n      </div>\n    </div>\n  }\n  \n","import React from 'react';\n\n\nexport function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweets\"\n    const responseType = 'json'\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function(){\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function(e) {\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()    \n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetComponent} from './tweets'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <TweetComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React ...\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root');\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );  \n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}